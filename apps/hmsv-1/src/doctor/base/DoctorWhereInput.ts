/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AppointmentListRelationFilter } from "../../appointment/base/AppointmentListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { DepartmentWhereUniqueInput } from "../../department/base/DepartmentWhereUniqueInput";
import { StringFilter } from "../../util/StringFilter";
import { MedicalRecordListRelationFilter } from "../../medicalRecord/base/MedicalRecordListRelationFilter";
import { PrescriptionListRelationFilter } from "../../prescription/base/PrescriptionListRelationFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class DoctorWhereInput {
  @ApiProperty({
    required: false,
    type: () => AppointmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AppointmentListRelationFilter)
  @IsOptional()
  @Field(() => AppointmentListRelationFilter, {
    nullable: true,
  })
  appointments?: AppointmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DepartmentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DepartmentWhereUniqueInput)
  @IsOptional()
  @Field(() => DepartmentWhereUniqueInput, {
    nullable: true,
  })
  department?: DepartmentWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  licenseNumber?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => MedicalRecordListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MedicalRecordListRelationFilter)
  @IsOptional()
  @Field(() => MedicalRecordListRelationFilter, {
    nullable: true,
  })
  medicalRecords?: MedicalRecordListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PrescriptionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PrescriptionListRelationFilter)
  @IsOptional()
  @Field(() => PrescriptionListRelationFilter, {
    nullable: true,
  })
  prescriptions?: PrescriptionListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  specialization?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;
}

export { DoctorWhereInput as DoctorWhereInput };
