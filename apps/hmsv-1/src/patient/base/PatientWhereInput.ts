/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { AppointmentListRelationFilter } from "../../appointment/base/AppointmentListRelationFilter";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { EnumPatientGender } from "./EnumPatientGender";
import { StringFilter } from "../../util/StringFilter";
import { MedicalRecordListRelationFilter } from "../../medicalRecord/base/MedicalRecordListRelationFilter";
import { PrescriptionListRelationFilter } from "../../prescription/base/PrescriptionListRelationFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class PatientWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  allergies?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => AppointmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AppointmentListRelationFilter)
  @IsOptional()
  @Field(() => AppointmentListRelationFilter, {
    nullable: true,
  })
  appointments?: AppointmentListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  bloodGroup?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  dateOfBirth?: DateTimeFilter;

  @ApiProperty({
    required: false,
    enum: EnumPatientGender,
  })
  @IsEnum(EnumPatientGender)
  @IsOptional()
  @Field(() => EnumPatientGender, {
    nullable: true,
  })
  gender?: "MALE" | "FEMALE" | "OTHER";

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => MedicalRecordListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MedicalRecordListRelationFilter)
  @IsOptional()
  @Field(() => MedicalRecordListRelationFilter, {
    nullable: true,
  })
  medicalRecords?: MedicalRecordListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PrescriptionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PrescriptionListRelationFilter)
  @IsOptional()
  @Field(() => PrescriptionListRelationFilter, {
    nullable: true,
  })
  prescriptions?: PrescriptionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;
}

export { PatientWhereInput as PatientWhereInput };
