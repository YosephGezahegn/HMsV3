/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
} from "class-validator";
import { AppointmentCreateNestedManyWithoutPatientsInput } from "./AppointmentCreateNestedManyWithoutPatientsInput";
import { Type } from "class-transformer";
import { EnumPatientGender } from "./EnumPatientGender";
import { MedicalRecordCreateNestedManyWithoutPatientsInput } from "./MedicalRecordCreateNestedManyWithoutPatientsInput";
import { PrescriptionCreateNestedManyWithoutPatientsInput } from "./PrescriptionCreateNestedManyWithoutPatientsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class PatientCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  allergies?: string | null;

  @ApiProperty({
    required: false,
    type: () => AppointmentCreateNestedManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => AppointmentCreateNestedManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => AppointmentCreateNestedManyWithoutPatientsInput, {
    nullable: true,
  })
  appointments?: AppointmentCreateNestedManyWithoutPatientsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bloodGroup?: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  dateOfBirth!: Date;

  @ApiProperty({
    required: true,
    enum: EnumPatientGender,
  })
  @IsEnum(EnumPatientGender)
  @Field(() => EnumPatientGender)
  gender!: "MALE" | "FEMALE" | "OTHER";

  @ApiProperty({
    required: false,
    type: () => MedicalRecordCreateNestedManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => MedicalRecordCreateNestedManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => MedicalRecordCreateNestedManyWithoutPatientsInput, {
    nullable: true,
  })
  medicalRecords?: MedicalRecordCreateNestedManyWithoutPatientsInput;

  @ApiProperty({
    required: false,
    type: () => PrescriptionCreateNestedManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => PrescriptionCreateNestedManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => PrescriptionCreateNestedManyWithoutPatientsInput, {
    nullable: true,
  })
  prescriptions?: PrescriptionCreateNestedManyWithoutPatientsInput;

  @ApiProperty({
    required: true,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @Field(() => UserWhereUniqueInput)
  user!: UserWhereUniqueInput;
}

export { PatientCreateInput as PatientCreateInput };
