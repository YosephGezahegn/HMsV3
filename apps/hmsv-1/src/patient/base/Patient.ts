/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
} from "class-validator";
import { Appointment } from "../../appointment/base/Appointment";
import { Type } from "class-transformer";
import { EnumPatientGender } from "./EnumPatientGender";
import { MedicalRecord } from "../../medicalRecord/base/MedicalRecord";
import { Prescription } from "../../prescription/base/Prescription";
import { User } from "../../user/base/User";

@ObjectType()
class Patient {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  allergies!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Appointment],
  })
  @ValidateNested()
  @Type(() => Appointment)
  @IsOptional()
  appointments?: Array<Appointment>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bloodGroup!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  dateOfBirth!: Date;

  @ApiProperty({
    required: true,
    enum: EnumPatientGender,
  })
  @IsEnum(EnumPatientGender)
  @Field(() => EnumPatientGender, {
    nullable: true,
  })
  gender?: "MALE" | "FEMALE" | "OTHER";

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [MedicalRecord],
  })
  @ValidateNested()
  @Type(() => MedicalRecord)
  @IsOptional()
  medicalRecords?: Array<MedicalRecord>;

  @ApiProperty({
    required: false,
    type: () => [Prescription],
  })
  @ValidateNested()
  @Type(() => Prescription)
  @IsOptional()
  prescriptions?: Array<Prescription>;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  user?: User;
}

export { Patient as Patient };
