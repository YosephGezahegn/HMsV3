datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt   DateTime     @default(now())
  doctor      Doctor?
  email       String       @unique
  firstName   String
  id          String       @id @default(uuid()) @db.Uuid
  lastName    String
  password    String
  patient     Patient?
  phoneNumber String?
  role        EnumUserRole
  updatedAt   DateTime     @updatedAt
}

model Patient {
  allergies      String?
  appointments   Appointment[]
  bloodGroup     String?
  dateOfBirth    DateTime
  gender         EnumPatientGender
  id             String            @id @default(uuid()) @db.Uuid
  medicalRecords MedicalRecord[]
  prescriptions  Prescription[]
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @unique
}

model Doctor {
  appointments   Appointment[]
  department     Department      @relation(fields: [departmentId], references: [id])
  departmentId   String
  id             String          @id @default(uuid()) @db.Uuid
  licenseNumber  String          @unique
  medicalRecords MedicalRecord[]
  prescriptions  Prescription[]
  specialization String
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @unique
}

model Department {
  description String?
  doctors     Doctor[]
  id          String   @id @default(uuid()) @db.Uuid
  name        String
}

model Appointment {
  dateTime  DateTime
  doctor    Doctor                @relation(fields: [doctorId], references: [id])
  doctorId  String
  id        String                @id @default(uuid()) @db.Uuid
  notes     String?
  patient   Patient               @relation(fields: [patientId], references: [id])
  patientId String
  status    EnumAppointmentStatus
}

model MedicalRecord {
  date      DateTime @default(now())
  diagnosis String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  id        String   @id @default(uuid()) @db.Uuid
  notes     String?
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  treatment String?
}

model Prescription {
  doctor     Doctor    @relation(fields: [doctorId], references: [id])
  doctorId   String
  dosage     String
  endDate    DateTime?
  frequency  String
  id         String    @id @default(uuid()) @db.Uuid
  medication String
  notes      String?
  patient    Patient   @relation(fields: [patientId], references: [id])
  patientId  String
  startDate  DateTime
}

model Medication {
  description   String?
  id            String  @id @default(uuid()) @db.Uuid
  manufacturer  String?
  name          String
  stockQuantity Int     @default(0)
  unitPrice     Decimal @db.Decimal(10, 2)
}

model Bill {
  amount      Decimal  @db.Decimal(10, 2)
  date        DateTime @default(now())
  description String
  id          String   @id @default(uuid()) @db.Uuid
  isPaid      Boolean  @default(false)
  patientId   String   @db.Uuid
}

enum EnumUserRole {
  ADMIN
  DOCTOR
  NURSE
  PATIENT
  STAFF
}

enum EnumPatientGender {
  MALE
  FEMALE
  OTHER
}

enum EnumAppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}
